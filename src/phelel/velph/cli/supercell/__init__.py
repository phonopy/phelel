"""velph command line tool / velph-supercell."""

import pathlib
from typing import Optional

import click
import tomli

import phelel
from phelel.cui.phelel_script import finalize_phelel
from phelel.velph.cli import cmd_root
from phelel.velph.cli.supercell.differentiate import run_derivatives
from phelel.velph.cli.supercell.generate import write_supercell_input_files
from phelel.velph.cli.supercell.init import run_init
from phelel.velph.cli.supercell.phonopy import create_phonopy_yaml
from phelel.velph.utils.vasp import CutoffToFFTMesh


@cmd_root.group("supercell")
@click.help_option("-h", "--help")
def cmd_supercell():
    """Choose supercell options."""
    pass


#
# velph supercell init
#
@cmd_supercell.command("init")
@click.argument(
    "toml_filename",
    nargs=1,
    type=click.Path(),
    default="velph.toml",
)
@click.help_option("-h", "--help")
def cmd_init(toml_filename: str):
    """Generate displacements and write phelel_disp.yaml."""
    with open(toml_filename, "rb") as f:
        toml_dict = tomli.load(f)

    phe = run_init(toml_dict)

    phelel_yaml_filename = pathlib.Path("supercell/phelel_disp.yaml")
    phelel_yaml_filename.parent.mkdir(parents=True, exist_ok=True)
    finalize_phelel(
        phe,
        displacements_mode=True,
        filename=phelel_yaml_filename,
        sys_exit_after_finalize=False,
    )

    click.echo(f'"{phelel_yaml_filename}" was generated by phelel. ')
    click.echo('VASP input files will be generated by "velph supercell generate".')


#
# velph supercell generate
#
@cmd_supercell.command("generate")
@click.argument(
    "toml_filename",
    nargs=1,
    type=click.Path(),
    default="velph.toml",
)
@click.option(
    "--yaml-filename",
    "yaml_filename",
    nargs=1,
    type=click.Path(),
    default="supercell/phelel_disp.yaml",
)
@click.help_option("-h", "--help")
def cmd_generate(toml_filename: str, yaml_filename: str):
    """Generate supercell input files."""
    if not pathlib.Path("POTCAR").exists():
        click.echo('"POTCAR" not found in current directory.')

    write_supercell_input_files(
        pathlib.Path(toml_filename), pathlib.Path(yaml_filename)
    )


#
# velph supercell differentiate
#
@cmd_supercell.command("differentiate")
@click.argument("toml_filename", nargs=1, type=click.Path(), default="velph.toml")
@click.option(
    "--yaml-filename",
    "yaml_filename",
    nargs=1,
    type=click.Path(),
    default="supercell/phelel_disp.yaml",
)
@click.option(
    "--hdf5-filename",
    "hdf5_filename",
    nargs=1,
    type=click.Path(),
    default="supercell/phelel_params.hdf5",
)
@click.option(
    "--encut",
    nargs=1,
    type=float,
    default=None,
    help=(
        "Cutoff energy corresponding to FFT mesh of local potential grid. "
        "(encut: float, default=None)"
    ),
)
@click.help_option("-h", "--help")
def cmd_differentiate(
    toml_filename: str, yaml_filename: str, hdf5_filename: str, encut: Optional[float]
) -> None:
    """Calculate derivatives and write phelel_params.hdf5."""
    with open(toml_filename, "rb") as f:
        toml_dict = tomli.load(f)

    if "phelel" not in toml_dict or "fft_mesh" not in toml_dict["phelel"]:
        click.echo('"fft_mesh" has to be specified in [phelel] section.', err=True)
        click.echo("See velph-hints.", err=True)
        return None

    is_symmetry = True
    try:
        if toml_dict["phelel"]["nosym"] is True:
            click.echo(
                'Found "nosym = true" in [phelel] section. '
                "Symmetrization is turned off."
            )
            is_symmetry = False
    except KeyError:
        pass

    phe = phelel.load(
        yaml_filename,
        fft_mesh=toml_dict["phelel"]["fft_mesh"],
        is_symmetry=is_symmetry,
    )

    if encut is not None:
        try:
            prec = toml_dict["vasp"]["selfenergy"]["incar"]["prec"]
        except KeyError:
            click.echo(f'[vasp.selfenergy.incar] not found in "{toml_filename}".')
            click.echo('prec = "accurate" is assumed.')
            prec = "accurate"
        click.echo(f"FFT mesh is generated for encut={encut}.")
        phe.fft_mesh = CutoffToFFTMesh.get_FFTMesh(encut, phe.primitive.cell, prec)

    if phe.fft_mesh is None:
        click.echo("FFT mesh is not specified.", err=True)
    else:
        if encut is None:
            click.echo(f"FFT mesh: {phe.fft_mesh}.")
        else:
            click.echo(f"FFT mesh: {phe.fft_mesh} (encut={encut}).")

    run_derivatives(phe, hdf5_filename=hdf5_filename)


#
# velph supercell phonopy
#
@cmd_supercell.command("phonopy")
@click.argument("toml_filename", nargs=1, type=click.Path(), default="velph.toml")
@click.option(
    "--yaml-filename",
    "yaml_filename",
    nargs=1,
    type=click.Path(),
    default="supercell/phelel_disp.yaml",
)
@click.help_option("-h", "--help")
def cmd_phonopy(
    toml_filename: str,
    yaml_filename: str,
):
    """Create phonopy_params.yaml."""
    create_phonopy_yaml(
        pathlib.Path(toml_filename),
        pathlib.Path(yaml_filename),
    )
